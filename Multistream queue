import queue
import threading
import time


class Table(threading.Thread):
    def __init__(self, number, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.number = number
        self.is_busy = False

    def table_is_busy(self):
        self.is_busy = True
        print(f'Стол {self.number} занят')

    def table_is_free(self):
        self.is_busy = False
        print(f'Стол {self.number} свободен')


class Cafe(threading.Thread):
    def __init__(self, tables):
        super().__init__()
        self.tables = tables
        self.queue = queue.Queue(maxsize=len(tables))

    def customer_arrival(self):
        self.customer = Customer()
        print(f'Посетитель {self.customer} прибыл')
        for table in self.tables:
            if not table.is_busy:
                return table
            else:
                return None

    def serve_customer(self, customer):
        table = self.customer_arrival()
        if table is not None:
            tables.table_is_buzy()
            print(f'Посетитель {self.customer} сел за стол {table}')
            time.sleep(5)
            tables.table_is_free()
            print(f'Посетитель {self.customer} покушал и ушел.')
        else:
            self.queue.put(customer)
            print(f'Посетитель {self.customer} ожидает свободный стол')


class Customer(threading.Thread):
    def __init__(self):
        super().__init__()
        self.kolvo = 10

    def run(self):
        for customer in self.kolvo:
            customer.start()
            while True:
                try:
                    self.queue.get(timeout=1)
                    сafe.customer_arrival()
                except queue.Empty:
                    print('Ожидаем посетителей...')
                    if not any(customer.is_alive() for customer in self.kolvo):
                        break
        for customer in self.kolvo:
            customer.join()
            print('Посетителей больше нет')


table1 = Table(1)
table2 = Table(2)
table3 = Table(3)
tables = [table1, table2, table3]

cafe = Cafe(tables)

cafe.customer_arrival()
customer_arrival_thread = threading.Thread(target=cafe.customer_arrival)
customer_arrival_thread.start()


customer_arrival_thread.join()
