import queue
import threading
import time


class Table:
    def __init__(self, number):
        self.number = number
        self.is_busy = False

    def table_is_busy(self):
        self.is_busy = True
        # print(f'Стол {self.number} занят')

    def table_is_free(self):
        self.is_busy = False
        # print(f'Стол {self.number} свободен')


class Cafe:
    def __init__(self, tables):
        self.tables = tables
        self.queue = queue.Queue()
        self.lock = threading.Lock()

    def customer_arrival(self):
        for i in range(1, 21):
            customer = Customer(i, self)
            customer.start()
            time.sleep(1)

    def serve_customer(self, customer):
        table = self.get_free_table()
        if table:
            table.table_is_busy()
            print(f'Посетитель номер {customer.number} сел за стол {table.number}')
            time.sleep(5)  # Обслуживание клиента
            table.table_is_free()
            print(f'Посетитель номер {customer.number} покушал и ушёл.')
            self.check_queue()
        else:
            self.queue.put(customer)
            print(f'Посетитель номер {customer.number} ожидает свободный стол.')

    def get_free_table(self):
        for table in self.tables:
            if not table.is_busy:
                return table
        return None

    def check_queue(self):
        if not self.queue.empty():
            next_customer = self.queue.get()
            self.serve_customer(next_customer)


class Customer(threading.Thread):
    def __init__(self, number, cafe):
        super().__init__()
        self.number = number
        self.cafe = cafe

    def run(self):
        print(f'Посетитель номер {self.number} прибыл')
        self.cafe.serve_customer(self)


# Создаем столики в кафе
table1 = Table(1)
table2 = Table(2)
table3 = Table(3)
tables = [table1, table2, table3]

# Инициализируем кафе
cafe = Cafe(tables)

# Запускаем поток для прибытия посетителей
customer_arrival_thread = threading.Thread(target=cafe.customer_arrival)
customer_arrival_thread.start()

# Ожидаем завершения работы прибытия посетителей
customer_arrival_thread.join()
print('Кафе завершило работу.')
