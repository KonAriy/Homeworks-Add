import os
import multiprocessing


class WarehouseManager(multiprocessing.Process):
    def __init__(self):
        super().__init__()
        self.data = {}
        self.queue = multiprocessing.Queue()

    def process_request(self, request):
        if request[1] == 'receipt':
            self.receipt(key=request[0], data=request[2])
        if request[1] == 'shipment':
            self.shipment(key=request[0], data=request[2])
        self.queue.put(self.data)

    def receipt(self, key, data):
        self.data[key] += data
        return self.data[key]

    def shipment(self, key, data):
        if self.data[key] is None:
            print('Товар не найден на складе')
        if self.data[key] is not None:
            self.data[key] -= data

    def run(self, requests):
        for _ in requests:
            manager.start()
            manager.join()
        self.queue.get()


# Создаем менеджера склада
manager = WarehouseManager()

# Множество запросов на изменение данных о складских запасах
requests = [
    ("product1", "receipt", 100),
    ("product2", "receipt", 150),
    ("product1", "shipment", 30),
    ("product3", "receipt", 200),
    ("product2", "shipment", 50)
]

# Запускаем обработку запросов
if __name__ == 'main':
    manager.run(requests)

# Выводим обновленные данные о складских запасах
print(manager.data)
